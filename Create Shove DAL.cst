<%@ Template Language="C#" TargetLanguage="C#" Inherits="OutputFileCodeTemplate" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" IncludeFunctions="false" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Linq" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Collections;
using System.Diagnostics;
using System.Configuration;
using System.Xml;
using System.Text;
using System.Globalization;
using System.Collections.Specialized;
using Shove.Database;
namespace DAL
{
    public class Tables
    {
    <%foreach (var item in SourceDatabase.Tables)
        {%>
        public class <%=item.Name%> : MSSQL.TableBase
        { 
            <%foreach (var itemColumn in item.Columns)
            {%>
            public MSSQL.Field <%=itemColumn.Name %>;
            <%}%>
            public <%=item.Name %>()
            {
                TableName = "<%=item.Name%>";
                <% foreach (var itemColumn in item.Columns)
                {%>
                <%=itemColumn.Name %> = new MSSQL.Field(this, "<%=itemColumn.Name%>", "<%=itemColumn.Name%>", SqlDbType.<%=GetSqlDbType(itemColumn.NativeType.ToString())%>, <%=itemColumn.ExtendedProperties["CS_isIdentity"].Value.ToString().ToLower() %>);
                <%} %>
            }
        }
        <%}%>
    }
    public class Views
    {
        <%foreach (var item in SourceDatabase.Views)
        {%>
        public class <%=item.Name%> : MSSQL.ViewBase
        {
            public <%=item.Name %>() { ViewName = "<%=item.Name%>"; }
        }
        <%}%>
     }   

<%
CommandSchema[] procs = SourceDatabase.Provider.GetCommands(SourceDatabase.ConnectionString,SourceDatabase);
SourceDatabase.IncludeFunctions=true;
CommandSchema[] allCommands = SourceDatabase.Provider.GetCommands(SourceDatabase.ConnectionString,SourceDatabase);
%>
    public class Functions
    {
    <%
    foreach (var item in allCommands)
    {
        if(!procs.Contains(item))
        {
            string paras = "";
            string returnValueType = item.CommandResults.ToString()=="dbo.1"?"DataTable": GetCSharpVariableType(item.ReturnValueParameter.DataType.ToString());
            foreach (var itemPara in item.InputParameters)
            	{
            		paras += paras==""?GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@",""):","+GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@","") ;
            	}
            %>
            public static <%=returnValueType %> <%=item.Name %>(<%=paras%>)
            {
               <% if(returnValueType=="DataTable"){
                   %>
                   return MSSQL.Select("select * from " + MSSQL.GetObjectFullName("<%=item.Name %>") + "(<%=item.InputParameters.ToString().Replace("dbo."+item.Name+".","") %>)"<%=item.InputParameters.Count>0?",":"" %>
                   <%
               } else {
                   %>
                   object Result = MSSQL.ExecuteFunction("<%=item.Name %>"<%=item.InputParameters.Count>0?",":"" %>
                   <%               
               }
               foreach (var itemPara in item.InputParameters)
               	{
                         %>
                         new MSSQL.Parameter("<%=itemPara.Name.Replace("@","") %>", SqlDbType.<%=GetSqlDbType(itemPara.NativeType.ToString()) %>, 0, ParameterDirection.Input, <%=itemPara.Name.Replace("@","") %>)<%=item.InputParameters.Count==1||item.InputParameters.IndexOf(itemPara)==item.InputParameters.Count-1?"":"," %>
                         <%
               	}
               
               %>
                    );
                <%=returnValueType=="DataTable"?"":"return ("+returnValueType+")Result;" %>
            }
            <%
        }
    }
    %>
    }
    public class Procedures{
        <%
        foreach (var item in procs)
    	{
            string paras = "";
            foreach (var itemPara in item.InputParameters)
        	{
        		paras += paras==""?GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@",""):","+GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@","") ;
        	}
            foreach (var itemPara in item.AllOutputParameters)
        	{
        	    paras += paras==""?"ref " + GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@",""):", ref "+GetCSharpVariableType(itemPara.DataType.ToString())+" "+ itemPara.Name.Replace("@","") ;
        	}
            
    	    %>
            
            public static int <%=item.Name %>(<%=paras %>)
            {
                MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();
                int CallResult = MSSQL.ExecuteStoredProcedureNonQuery("<%=item.Name %>", ref Outputs<%=item.AllInputParameters.Count==0&&item.AllOutputParameters.Count==0?"":"," %>
                        <%
                        foreach (var itemPara in item.InputParameters)
                    	{
                    		 %>
                            new MSSQL.Parameter("<%=itemPara.Name.Replace("@","") %>", SqlDbType.<%=GetSqlDbType(itemPara.NativeType.ToString()) %>, 0, ParameterDirection.Input, <%=itemPara.Name.Replace("@","") %>)<%=item.AllOutputParameters.Count==0&&item.AllInputParameters.IndexOf(itemPara)==item.AllInputParameters.Count-1?"":"," %>
                             <%
                    	}
                        foreach (var itemPara in item.AllOutputParameters)
                    	{
                    		 %>
                            new MSSQL.Parameter("<%=itemPara.Name.Replace("@","") %>", SqlDbType.<%=GetSqlDbType(itemPara.NativeType.ToString()) %>, 0, ParameterDirection.Output, <%=itemPara.Name.Replace("@","") %>)<%=item.AllOutputParameters.IndexOf(itemPara)==item.AllOutputParameters.Count-1?"":"," %>
                             <%
                    	}
                        %>
                    );
                    <%
                    if (item.AllOutputParameters.Count>0)
                	{
                		 %>
                         try {
                            <%
                            foreach (var itemPara in item.AllOutputParameters)
                            	{
                            		 %>
                             <%=itemPara.Name.Replace("@","") %> = (<%=GetCSharpVariableType(itemPara.DataType.ToString()) %>)Outputs["<%=itemPara.Name.Replace("@","") %>"];
                                     <%
                            	}
                        %>
                         } catch{}
                         <%
                	}    
                    %>

                return CallResult;
            }
            
            public static int <%=item.Name %>(<%=paras==""?"ref DataSet ds":"ref DataSet ds,"+paras %>)
            {
                MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();
                int CallResult = MSSQL.ExecuteStoredProcedureWithQuery("<%=item.Name %>", ref ds, ref Outputs<%=item.AllInputParameters.Count==0&&item.AllOutputParameters.Count==0?"":"," %>
                        <%
                        foreach (var itemPara in item.InputParameters)
                    	{
                    		 %>
                            new MSSQL.Parameter("<%=itemPara.Name.Replace("@","") %>", SqlDbType.<%=GetSqlDbType(itemPara.NativeType.ToString()) %>, 0, ParameterDirection.Input, <%=itemPara.Name.Replace("@","") %>)<%=item.AllOutputParameters.Count==0&&item.AllInputParameters.IndexOf(itemPara)==item.AllInputParameters.Count-1?"":"," %>
                             <%
                    	}
                        foreach (var itemPara in item.AllOutputParameters)
                    	{
                    		 %>
                            new MSSQL.Parameter("<%=itemPara.Name.Replace("@","") %>", SqlDbType.<%=GetSqlDbType(itemPara.NativeType.ToString()) %>, 0, ParameterDirection.Output, <%=itemPara.Name.Replace("@","") %>)<%=item.AllOutputParameters.IndexOf(itemPara)==item.AllOutputParameters.Count-1?"":"," %>
                             <%
                    	}
                        %>
                    );
                    <%
                    if (item.AllOutputParameters.Count>0)
                	{
                		 %>
                         try {
                            <%
                            foreach (var itemPara in item.AllOutputParameters)
                            	{
                            		 %>
                            <%=itemPara.Name.Replace("@","") %> = (<%=GetCSharpVariableType(itemPara.DataType.ToString()) %>)Outputs["<%=itemPara.Name.Replace("@","") %>"];
                                     <%
                            	}
                        %>
                         } catch{}
                         <%
                	}    
                    %>

                return CallResult;
            }
            <%
    	}
        %>
    }
}
<script runat="template">    
public string GetCSharpVariableType(string type)
{
    try 
    	{	        
    return DbTypeCSharp[type];			
    	}
    	catch (Exception ex)
    	{
    		switch (type)
            	{
                case "Xml":return "string";
            	}
    		//throw;
    	}
	return type;
}
public string GetPrimaryKey(TableSchema table){
    foreach (var item in table.Columns)
	{
        if(item.IsPrimaryKeyMember)return item.Name;
    }
    return null;
}
public string GetSqlDbType(string type)
{
	return SqlNativeSqlDb[type];
}
</script>
  