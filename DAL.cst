<%@ Template Language="C#" TargetLanguage="C#" Inherits="CodeSmith.BaseTemplates.OutputFileCodeTemplate" Debug="True" %>
<%@ Assembly Name="CodeSmith.BaseTemplates" %>
<%@ Import Namespace="CodeSmith.BaseTemplates" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Property Name="SourceDatabase" Type="SchemaExplorer.DatabaseSchema" IncludeFunctions="false" %>
<%@ Property Name="ImportBaseTableFile" Type="Boolean" Default="true" Optional="True" %>
<%@ Property Name="ImportSqlServiceFile" Type="Boolean" Default="true" Optional="True" %>
<%@ Property Name="ConnectionStringName" Type="String" Default="ConnectionString" Optional="True" %>
<%@ Import Namespace="System.Text" %>
<%@ Import Namespace="System.Linq" %>
<%@ Import Namespace="System.Text.RegularExpressions" %>
<%@ Import Namespace="System.Collections" %>
<%@ Import Namespace="System.IO" %>

<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="SqlNativeTypeToDbType" Src="SqlNativeType-DbType" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>

using System;
using System.IO;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Collections;
using System.Diagnostics;
using System.Configuration;
using System.Xml;
using System.Text;
using System.Globalization;
using System.Collections.Specialized;
using System.Collections.Generic;
/* 
 * file read only
 * author：mayb
 * https://github.com/maybgithub/CodeSmithTemplates
 * add to web.config/app.config
 *   <appSettings>
 *       <add key="ConnectionString" value="server=.;uid=sa;Pwd=sa;Database=DBName" />
 *  </appSettings>
 * <%=DateTime.Now %>
 */
namespace Mayb.DAL
{
<%
    Regex reg = new Regex(@"[\u4e00-\u9fa5]");
    CommandSchema[] procs = SourceDatabase.Provider.GetCommands(SourceDatabase.ConnectionString,SourceDatabase);
    SourceDatabase.IncludeFunctions=true;
    CommandSchema[] allCommands = SourceDatabase.Provider.GetCommands(SourceDatabase.ConnectionString,SourceDatabase);
%>
        #region tables
        public class Tables{
            <%foreach (var item in SourceDatabase.Tables)
            {
                string idName = null;
            %>
            public class <%=item.Name%>: BaseTable<Models.<%=item.Name%>Model>{
                public <%=item.Name %>(bool isInitModel=false):base("<%=item.Name %>"){ 
                    if(isInitModel) Model=new Models.<%=item.Name%>Model();
                    InitColumns();
                }
                public <%= item.Name %>(long id):base(id,"<%=item.Name %>"){ 
                    ReadModels(reader,ReadModel);
                    InitColumns();
                }
                
                void InitColumns() {
                <%
                   for (int i = 0; i < item.Columns.Count; i++)
           			{
                       var column = item.Columns[i];
           			 %>
                     Columns.Add("@<%=column.Name %>",SqlDbType.<%=SqlNativeSqlDb[column.NativeType.ToString()] %>);
                     <%
           			}%>
                }
                
                Models.<%=item.Name%>Model ReadModel(SqlDataReader reader)
                {
                    Model = new Models.<%=item.Name%>Model();
                <% foreach (var itemColumn in item.Columns)
                    {
                    int index = item.Columns.IndexOf(itemColumn);
                    string dataType = DbDataReader[itemColumn.DataType.ToString()];
                    %>
                    if(!reader.IsDBNull(<%=index%>)) Model.<%=itemColumn.Name %> = <%=dataType!="GetBytes"?"reader."+dataType+"("+index+")":"null" %>;
                    <%
                    } %>
                    return Model;
                }
                public List<Models.<%=item.Name%>Model> Select(string where=null, int? top=null){base.Select(where,top,ReadModel);return Models;}
            }
            <%
            }%>
        }
        #endregion
        
        #region views
        public class Views{
            <% foreach (var item in SourceDatabase.Views)
                {%>
            public class <%=item.Name %>: BaseTable<Models.<%=item.Name%>Model>{
                public <%=item.Name %>():base("<%=item.Name %>"){}
                public <%= item.Name %>(long id):base(id,"<%=item.Name %>"){ ReadModels(reader,ReadModel);}
                Models.<%=item.Name%>Model ReadModel(SqlDataReader reader)
                {
                    Model = new Models.<%=item.Name%>Model();
                <% foreach (var itemColumn in item.Columns)
                    {
                    int index = item.Columns.IndexOf(itemColumn);
                    string dataType = DbDataReader[itemColumn.DataType.ToString()];
                    %>
                    if(!reader.IsDBNull(<%=index%>)) Model.<%=itemColumn.Name %> = <%=dataType!="GetBytes"?"reader."+dataType+"("+index+")":"null" %>;
                    <%
                    } %>
                    return Model;
                }
                public List<Models.<%=item.Name%>Model> Select(string where=null, int? top=null){base.Select(where,top,ReadModel);return Models;}
            }
                <%
                } %>
        }
        #endregion
        
        #region functions
        public class Functions{
            public static SqlService Sql = new SqlService();
            static T Exec<T>(string funName,string paras) {
                string sqlText = string.Format("select dbo.{0}({1})", funName, paras);
                DataSet ds = Sql.ExecuteSqlDataSet(sqlText);
                if (ds != null && ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0 && !Convert.IsDBNull(ds.Tables[0].Rows[0][0]))return (T)ds.Tables[0].Rows[0][0];
                return default(T);
            }
            static DataTable Exec(string funName, string paras) {
                string sqlText = string.Format("select * from dbo.{0}({1})", funName, paras);
                DataSet ds = Sql.ExecuteSqlDataSet(sqlText);
                return ds != null && ds.Tables.Count > 0 ? ds.Tables[0] : null;
            }
            <% foreach (var item in allCommands)
                {
                     if(!procs.Contains(item)){
                        string paras = "",paras2="",name="";
                        StringBuilder strb = new StringBuilder();
                        string returnValueType = item.CommandResults.ToString()=="dbo.1"?"DataTable": DbTypeCSharp[item.ReturnValueParameter.DataType.ToString()];
                        foreach (var itemPara in item.InputParameters)
                        {
                            name = itemPara.Name;
                            name = reg.IsMatch(name)?"@name"+item.InputParameters.IndexOf(itemPara):itemPara.Name;
                            paras += paras==""?DbTypeCSharp[itemPara.DataType.ToString()]+" "+ name.Replace("@",""):","+DbTypeCSharp[itemPara.DataType.ToString()]+" "+ name.Replace("@","") ;
                            paras2 += paras2==""?name:","+name;
                            strb.AppendLine(string.Format("Sql.AddParameter(new SqlParameter(\"{0}\",{1}));",name,name.Replace("@","")));
                            strb.Append("                ");
                        }
                        %>
            public static <%=returnValueType %> <%=item.Name %>(<%=paras%>){
                Sql.Reset();
                <%=strb.ToString() %>
                <% if(returnValueType=="DataTable"){
                    %>
                return Exec("<%=item.Name%>",<%=paras2==""?"\"\"":"\""+paras2+"\"" %>);
                    <%
                }else {%>
                return Exec<<%=returnValueType%>>("<%=item.Name%>",<%=paras2==""?"\"\"":"\""+paras2+"\"" %>);
                <%}%>
            }
                        <%
                     }
                } %>
        }
        #endregion
        
        #region procedures
        public class Procedures{
            public static SqlService Sql = new SqlService();
            <% 
                string[,] strs;
                foreach (var item in procs)
                {
                    string name=""              //参数名称
                          ,type=""              //参数类型
                          ,paras=""             //参数串 [ref] 参数类型 参数名称
                          ,inputParas=""        //输入参数名称，以逗号分隔
                          ,inputTypeParas="";   //输入参数类型和名称 参数类型+参数名称 以逗号分隔
                    int index = 0;
                    strs = new string[item.InputParameters.Count+item.AllOutputParameters.Count,4];                    
                    foreach (var itemPara in item.InputParameters)
                    {
                        name = itemPara.Name;
                        type = DbTypeCSharp[itemPara.DataType.ToString()];
                        name = reg.IsMatch(name)?"name"+index:itemPara.Name.Replace("@","");
                        inputParas+=name+",";
                        inputTypeParas+= type+" "+ name+",";
                        strs[index,0] = "";
                        strs[index,1] = type;
                        strs[index,2] = name;
                        strs[index,3] = itemPara.NativeType.ToString();
                        index++;
                    }
                    foreach (var itemPara in item.AllOutputParameters)
                    {
                        name = itemPara.Name;
                        type = DbTypeCSharp[itemPara.DataType.ToString()];
                        name = reg.IsMatch(name)?"name"+index:itemPara.Name.Replace("@","");
                        strs[index,0] = "ref";
                        strs[index,1] = type;
                        strs[index,2] = name;
                        strs[index,3] = itemPara.NativeType.ToString();
                        index++;
                    }
                    for (int i = 0; i < strs.GetLength(0); i++)
                    {
                        paras += strs[i,0]+" "+strs[i,1]+" "+strs[i,2]+",";
                    }
                    paras = paras.Trim(',');
                    inputParas = inputParas.Trim(',');
                    inputTypeParas = inputTypeParas.Trim(',');
                    %>
            static void Set<%=item.Name %>(<%=inputTypeParas %>){
                Sql.Reset();
                <%
                for (int i = 0; i < strs.GetLength(0); i++)
                {
                    if(strs[i,0]==""){
                    %>
                Sql.AddParameter(new SqlParameter("@<%=strs[i,2]%>",<%=strs[i,2]%>));
                    <%
                    }else if(strs[i,0]=="ref"){
                %>
                Sql.AddOutputParameter("@<%=strs[i,2] %>",SqlDbType.<%=SqlNativeSqlDb[strs[i,3]]%>,int.MaxValue);
                <%
                    }
                }
                %>
                Sql.AddReturnValueParameter();
            }
            public static int <%=item.Name %>(<%=paras %>){
                Set<%=item.Name %>(<%=inputParas %>);
                Sql.ExecuteSPReader("<%=item.Name%>");
                <%for (int i = 0; i < strs.GetLength(0); i++)
                {
                    if(strs[i,0]=="ref"){
                %>
                <%=strs[i,2] %> = (<%=strs[i,1]%>)Sql.Parameters["@<%=strs[i,2]%>"].Value;
                <%}
                } %>
                Sql.Disconnect();
                return Sql.ReturnValue;
            }
            
            public static int <%=item.Name %>(<%=paras==""?"ref DataSet ds":"ref DataSet ds,"+paras %>){
                Set<%=item.Name %>(<%=inputParas %>);
                ds = Sql.ExecuteSPDataSet("<%=item.Name%>");
                <%for (int i = 0; i < strs.GetLength(0); i++)
                {
                    if(strs[i,0]=="ref"){
                %>
                <%=strs[i,2] %> = (<%=strs[i,1]%>)Sql.Parameters["@<%=strs[i,2]%>"].Value;
                <%}
                } %>
                Sql.Disconnect();
                return Sql.ReturnValue;
            }
             <%} %>
        }
        #endregion
            
        #region models
        public class Models{
            <%foreach (var item in SourceDatabase.Tables)
            {
             %>
             public class <%=item.Name %>Model{
                <%foreach (var itemColumn in item.Columns)
                {%>
                <%=itemColumn.SystemType.Name +" _"+itemColumn.Name+";" %>
                /// <summary>
                /// <%--<%=itemColumn.Description %>--%>
                /// </summary>
                public <%=itemColumn.SystemType.Name +" "+itemColumn.Name+"" %>{ 
                    get{ return _<%=itemColumn.Name%>; } 
                    set{ _<%=itemColumn.Name%> = value;}
                }
                <%}%>
             }
             <%
            } %>
            
            <%foreach (var item in SourceDatabase.Views)
            {
             %>
             public class <%=item.Name %>Model{
                <%foreach (var itemColumn in item.Columns)
                {%>
                <%=itemColumn.SystemType.Name +" _"+itemColumn.Name+";" %>
                public <%=itemColumn.SystemType.Name +" "+itemColumn.Name+"" %>{ get{ return _<%=itemColumn.Name%>; } set{ _<%=itemColumn.Name%> = value;}}
                <%}%>
             }
             <%
            } %>
            
        }
        #endregion
       <% if(ImportBaseTableFile){
           %>
           <%=ReadFile("BaseTable.cs") %>
           <%
       } %>
        <% if(ImportSqlServiceFile){
           %>
           <%=ReadFile("SqlService.cs") %>
           <%
       } %>
    }

<script runat="template">
public string ReadFile(string path){
    System.IO.FileStream fs = new System.IO.FileStream(path,FileMode.Open);
    System.IO.StreamReader read = new StreamReader(fs);
    string content = read.ReadToEnd();
    read.Close();
    System.Text.RegularExpressions.Regex reg = new System.Text.RegularExpressions.Regex(@"(?<=\{)[\s\S]*(?=})");
    //return "";
    return reg.Match(content).ToString();
}
</script>
